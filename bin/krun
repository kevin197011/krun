#!/usr/bin/env python
# Copyright (c) 2023 kk
#
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT


try:
    # python 3.x
    from urllib.parse import urlparse
    from urllib.request import Request, urlopen
except ImportError:
    # python 2.x
    from urlparse import urlparse
    from urllib2 import Request, urlopen

import sys
import os
import shutil
import re
import json


class Krun:
    # ua
    UA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"

    def run(self, args):
        if args[1] == "list":
            self.list()
        if args[1] == "help":
            self._help()
        if args[1] == "status":
            self._status()
        if re.match(r"\d+", args[1]):
            self._run(int(args[1]))
        if re.match(r".*\.sh", args[1]):
            self._run(str(args[1]))

    def list(self):
        num = 1
        print("  Krun Script List:")
        for item in self._list():
            print("    - [{0}] {1}".format(num, item))
            num += 1

    def _url(self, options):
        if isinstance(options, int):
            sh = self._list()[options - 1]
        else:
            sh = options
        url = "https://raw.githubusercontent.com/kevin197011/krun/main/lib/{0}".format(sh)
        return url

    def _run(self, options):
        url = self._url(options)
        parsed_url = urlparse(url)
        sh = os.path.basename(parsed_url.path)

        with open("/tmp/{}".format(sh), "w") as f:
            f.write(self._get(url))
        os.system("bash /tmp/{}".format(sh))
        os.remove("/tmp/{}".format(sh))

    def _list(self):
        url = "https://raw.githubusercontent.com/kevin197011/krun/main/resources/krun.json"
        return json.loads(self._get(url))

    def _status(self):
        print("Krun ready!")

    def _help(self):
        print("  Usage: krun [list | help | <number>]")

    def _get(self, url):
        req = Request(url)
        req.add_header("User-Agent", self.UA)
        content = urlopen(req).read().decode("utf-8")
        return content


if __name__ == "__main__":
    c = Krun()
    c.run(sys.argv)
