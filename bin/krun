#!/usr/bin/env python
# Copyright (c) 2023 kk
#
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT

import sys
import os
import subprocess
import tempfile
import json
import re
import argparse
from urllib.request import Request, urlopen
from urllib.parse import urlparse
import ssl


class Krun:
    """Multi-language script runner"""

    # ASCII art banner
    BANNER = r"""______
___  /____________  ________
__  //_/_  ___/  / / /_  __ \\
_  ,<  _  /   / /_/ /_  / / /
/_/|_| /_/    \__,_/ /_/ /_/
       Multi-Language Script Runner

üöÄ Krun Multi-Language Script Collection"""

    # Supported interpreters by file extension
    INTERPRETERS = {
        '.sh': 'bash',
        '.bash': 'bash',
        '.zsh': 'zsh',
        '.py': 'python3',
        '.python': 'python3',
        '.rb': 'ruby',
        '.ruby': 'ruby',
        '.pl': 'perl',
        '.perl': 'perl',
        '.js': 'node',
        '.javascript': 'node',
        '.lua': 'lua',
        '.r': 'Rscript',
        '.R': 'Rscript',
        '.php': 'php',
        '.swift': 'swift',
        '.groovy': 'groovy',
        '.scala': 'scala',
        '.ps1': 'powershell',
        '.fish': 'fish',
    }

    # Language icons for display
    LANG_ICONS = {
        'shell': 'üêö',
        'python': 'üêç',
        'ruby': 'üíé',
        'perl': 'üê™',
        'javascript': 'üü®',
        'other': 'üìÑ'
    }

    def __init__(self):
        """Initialize Krun instance"""
        self.user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
        self.base_url = "https://raw.githubusercontent.com/kevin197011/krun/main"
        self.ssl_context = ssl._create_unverified_context()

    def command_exists(self, command):
        """Check if command exists in system"""
        try:
            subprocess.run([command, '--version'],
                          stdout=subprocess.DEVNULL,
                          stderr=subprocess.DEVNULL)
            return True
        except (OSError, subprocess.CalledProcessError):
            return False

    def get_extension(self, filename):
        """Get file extension"""
        return os.path.splitext(filename)[1].lower()

    def get_interpreter(self, filename, content=None):
        """Get interpreter for file"""
        ext = self.get_extension(filename)

        # Try extension-based detection
        if ext in self.INTERPRETERS:
            interpreter = self.INTERPRETERS[ext]
            if self.command_exists(interpreter):
                return interpreter

        # Try shebang detection
        if content and content.startswith('#!'):
            shebang = content.split('\n')[0][2:].strip()
            for cmd in ['python3', 'python', 'ruby', 'perl', 'node', 'bash', 'zsh']:
                if cmd in shebang and self.command_exists(cmd):
                    return cmd

        # Default fallback
        return 'bash' if ext in ['.sh', '.bash', ''] else None

    def download_script(self, script_name):
        """Download script content from GitHub"""
        url = f"{self.base_url}/lib/{script_name}"
        req = Request(url)
        req.add_header("User-Agent", self.user_agent)
        return urlopen(req, context=self.ssl_context).read().decode("utf-8")

    def get_script_list(self):
        """Get list of available scripts"""
        url = f"{self.base_url}/resources/krun.json"
        req = Request(url)
        req.add_header("User-Agent", self.user_agent)
        return json.loads(urlopen(req, context=self.ssl_context).read().decode("utf-8"))

    def group_scripts(self, scripts):
        """Group scripts by language"""
        groups = {'shell': [], 'python': [], 'ruby': [], 'perl': [], 'javascript': [], 'other': []}

        for script in scripts:
            ext = self.get_extension(script)
            if ext in ['.sh', '.bash', '.zsh']:
                groups['shell'].append(script)
            elif ext in ['.py', '.python']:
                groups['python'].append(script)
            elif ext in ['.rb', '.ruby']:
                groups['ruby'].append(script)
            elif ext in ['.pl', '.perl']:
                groups['perl'].append(script)
            elif ext in ['.js', '.javascript']:
                groups['javascript'].append(script)
            else:
                groups['other'].append(script)

        return groups

    def execute_script(self, script_name):
        """Execute a script"""
        try:
            content = self.download_script(script_name)
            interpreter = self.get_interpreter(script_name, content)

            if not interpreter:
                print(f"Error: Cannot determine interpreter for {script_name}")
                return

            # Create temporary file
            with tempfile.NamedTemporaryFile(mode='w', suffix=self.get_extension(script_name), delete=False) as tmp_file:
                tmp_file.write(content)
                tmp_path = tmp_file.name

            # Make executable and run
            os.chmod(tmp_path, 0o755)
            print(f"Executing {script_name} with {interpreter}...")
            subprocess.run([interpreter, tmp_path])

        except KeyboardInterrupt:
            print("\nScript execution interrupted by user")
        except Exception as e:
            print(f"Error executing script: {e}")
        finally:
            # Cleanup
            try:
                os.remove(tmp_path)
            except:
                pass

    def debug_script(self, script_name):
        """Show debug information for script"""
        try:
            content = self.download_script(script_name)
            interpreter = self.get_interpreter(script_name, content)

            print("=== Script Debug Information ===")
            print(f"Filename: {script_name}")
            print(f"Extension: {self.get_extension(script_name)}")
            print(f"Interpreter: {interpreter}")
            print("\n=== Script Content ===")
            print(content)

        except Exception as e:
            print(f"Error: {e}")

    def show_list(self):
        """Show list of available scripts"""
        print(self.BANNER)
        print("=" * 50)

        scripts = self.get_script_list()
        groups = self.group_scripts(scripts)

        print(f"\nüìä Total Scripts: {len(scripts)}")
        active_groups = {k: v for k, v in groups.items() if v}
        print(f"üìÅ Categories: {len(active_groups)}")
        print()

        num = 1
        for lang, script_list in groups.items():
            if script_list:
                icon = self.LANG_ICONS.get(lang, 'üìÑ')
                print(f"{icon} {lang.upper()} Scripts ({len(script_list)} files)")
                print("‚îÄ" * 40)
                for script in script_list:
                    print(f"    [{num:2}] {script}")
                    num += 1
                print()

        print("üí° Usage: krun <number> or krun <script_name>")
        print("üîç Debug: krun <number> --debug")

    def show_status(self):
        """Show system status"""
        print("Krun ready!")
        print("Available interpreters:")
        for ext, interpreter in self.INTERPRETERS.items():
            if self.command_exists(interpreter):
                print(f"  {ext}: {interpreter}")

    def show_languages(self):
        """Show supported languages"""
        print(self.BANNER)
        print("\nSupported languages:")

        lang_map = {
            'Shell/Bash': ['.sh', '.bash', '.zsh'],
            'Python': ['.py', '.python'],
            'Ruby': ['.rb', '.ruby'],
            'Perl': ['.pl', '.perl'],
            'JavaScript': ['.js', '.javascript'],
            'Lua': ['.lua'],
            'R': ['.r', '.R'],
            'PHP': ['.php'],
            'Swift': ['.swift'],
            'Groovy': ['.groovy'],
            'Scala': ['.scala'],
            'PowerShell': ['.ps1']
        }

        for lang, exts in lang_map.items():
            available = any(self.command_exists(self.INTERPRETERS.get(ext, '')) for ext in exts)
            status = "‚úì" if available else "‚úó"
            print(f"  {status} {lang}")

    def show_help(self):
        """Show help message"""
        print(self.BANNER)
        print("\nUsage:")
        print("  krun list                    - List all scripts")
        print("  krun <number>                - Execute script by number")
        print("  krun <script_name>           - Execute script by name")
        print("  krun <number|script> --debug - Show debug info")
        print("  krun status                  - Show system status")
        print("  krun languages               - Show supported languages")
        print("  krun version                 - Show version")
        print("  krun help                    - Show this help")
        print("\nExamples:")
        print("  krun 1                       - Execute first script")
        print("  krun hello-world.sh          - Execute hello-world.sh")
        print("  krun 5 --debug               - Debug script #5")

    def show_version(self):
        """Show version information"""
        print(self.BANNER)
        print("\nv2.0")
        print("Copyright (c) 2023 kk")
        print("MIT License")

    def run_by_number(self, number, debug=False):
        """Run script by number"""
        scripts = self.get_script_list()
        try:
            script_name = scripts[int(number) - 1]
            if debug:
                self.debug_script(script_name)
            else:
                self.execute_script(script_name)
        except IndexError:
            print(f"Error: Script #{number} not found")

    def run_by_name(self, script_name, debug=False):
        """Run script by name"""
        if debug:
            self.debug_script(script_name)
        else:
            self.execute_script(script_name)

    def is_script_name(self, name):
        """Check if name looks like a script file"""
        return re.match(r".*\.(sh|py|rb|pl|js|lua|r|php|swift|groovy|scala|ps1|fish|bash|zsh|python|ruby|perl|javascript)$", name)

    def run(self, args):
        """Main entry point"""
        parser = argparse.ArgumentParser(
            description="Multi-language script runner",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
Examples:
  krun list                    List all available scripts
  krun 1                      Execute first script
  krun hello-world.sh         Execute hello-world.sh
  krun 5 --debug              Show debug info for script #5
  krun status                 Show system status
  krun languages              Show supported languages
  krun version                Show version information
            """
        )

        parser.add_argument('command', nargs='?', help='Command or script to run')
        parser.add_argument('--debug', action='store_true', help='Show debug information')
        parser.add_argument('--version', action='version', version='krun v2.0')

        # Parse arguments
        parsed_args = parser.parse_args(args)

        # Handle commands
        if not parsed_args.command:
            self.show_help()
            return

        command = parsed_args.command

        if command == "list":
            self.show_list()
        elif command == "help":
            self.show_help()
        elif command == "status":
            self.show_status()
        elif command == "version":
            self.show_version()
        elif command == "languages":
            self.show_languages()
        elif command.isdigit():
            # Execute by number
            self.run_by_number(command, parsed_args.debug)
        elif self.is_script_name(command):
            # Execute by script name
            self.run_by_name(command, parsed_args.debug)
        else:
            print(f"Error: Unknown command '{command}'")
            self.show_help()


def main():
    """Main function"""
    krun = Krun()
    krun.run(sys.argv[1:])


if __name__ == "__main__":
    main()
